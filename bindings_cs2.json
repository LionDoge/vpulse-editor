{
    "events": [

    {
        "displayname": "Event_OnRoundStart",
        "libname": "CCSPointPulseAPI::Event_OnRoundStart",
        "inparams": [
            {
                "name": "nRoundNumber",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "displayname": "Event_OnRoundFreezeEnd",
        "libname": "CCSPointPulseAPI::Event_OnRoundFreezeEnd"
    },
    {
        "displayname": "Event_OnRoundEnd",
        "libname": "CCSPointPulseAPI::Event_OnRoundEnd",
        "inparams": [
            {
                "name": "nWinner",
                "type": "PVAL_INT"
            },
            {
                "name": "nReason",
                "type": "PVAL_INT"
            }
        ]
    }

    ],

    "gamefunctions": [

    {
        "type": "action",
        "displayname": "Con Command",
        "libname": "CPulseServerFuncs::ConCommand",
        "description": "Executes a con command",
        "inparams": [
            {
                "name": "pCommand",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Graph Entity",
        "libname": "CPulseServerFuncs::GetGraphEntity",
        "description": "Get the entity that this graph is running on.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Origin",
        "libname": "CPulseServerFuncs::GetEntityOrigin",
        "description": "Get the position of an entity.",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3_WORLDSPACE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Height Above Nav Mesh",
        "libname": "CPulseServerFuncs::GetEntityHeightAboveNavMesh",
        "description": "Get the height of the entity off the navmesh.",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Nav Mesh Position",
        "libname": "CPulseServerFuncs::GetEntityNavMeshPosition",
        "description": "Get the height of the entity off the world geo.",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Height Above World Collision",
        "libname": "CPulseServerFuncs::GetEntityHeightAboveWorldCollision",
        "description": "Get the nearest navmesh position for the entity.",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Facing Yaw Angle Delta",
        "libname": "CPulseServerFuncs::GetEntityFacingYawAngleDelta",
        "description": "Get angle delta between the first entity's facing vector and direction vector to the second entity.",
        "inparams": [
            {
                "name": "hEnt1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEnt2",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Distance Between Points",
        "libname": "CPulseServerFuncs::GetDistanceBetweenPoints",
        "description": "Get the distance between two points as a float number.",
        "inparams": [
            {
                "name": "vPoint1",
                "type": "PVAL_VEC3_WORLDSPACE"
            },
            {
                "name": "vPoint2",
                "type": "PVAL_VEC3_WORLDSPACE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Name",
        "libname": "CPulseServerFuncs::GetEntityName",
        "description": "Get the name of the entity.",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_ENTITY_NAME"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Count Entities With Name",
        "libname": "CPulseServerFuncs::CountEntitiesWithName",
        "description": "Count the number of entities whose name matches a pattern.",
        "inparams": [
            {
                "name": "pNamePattern",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Teleport Entity",
        "libname": "CPulseServerFuncs::TeleportEntity",
        "description": "Teleport the given entity to the target entity's position and orientation",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Remove Entity",
        "libname": "CPulseServerFuncs::RemoveEntity",
        "description": "Permanently removes the entity from the world.",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Can Character See Entity",
        "libname": "CPulseServerFuncs::CanCharacterSeeEntity",
        "description": "Return true if the character (player or NPC) can see the target entity (i.e. within FOV and has LOS)",
        "inparams": [
            {
                "name": "hEntityCharacter",
                "type": "PVAL_EHANDLE",
                "value": "baseplayerpawn"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Does Entity Have LOS",
        "libname": "CPulseServerFuncs::DoesEntityHaveLOS",
        "description": "Return true if the entity has LOS to the target entity",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Deal Damage",
        "libname": "CPulseServerFuncs::DealDamage",
        "description": "Deals damage to an entity",
        "inparams": [
            {
                "name": "hTarget",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hAttacker",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "flDamage",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "vecForce",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Remove All Ammo",
        "libname": "CPulseServerFuncs::RemoveAllAmmo",
        "description": "Removes all ammo from an entity",
        "inparams": [
            {
                "name": "hTarget",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Proxy",
        "libname": "CPulseServerFuncs::CreatePhysicsProxy",
        "description": "Creates a physics proxy at the entity's attachment point.",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName",
                "type": "PVAL_STRING"
            },
            {
                "name": "pPhysicsModel",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Constraint",
        "libname": "CPulseServerFuncs::CreatePhysicsConstraint",
        "description": "Constrain an entity to the world or another entity at a fixed relative position.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "bEnableLinearConstraint",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flLinearFrequency",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flLinearDampingRatio",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bEnableAngularConstraint",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flAngularFrequency",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flAngularDampeningRatio",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Ball Socket Constraint",
        "libname": "CPulseServerFuncs::CreatePhysicsBallSocketConstraint",
        "description": "Create a constraint that keeps the position of two objects fixed, relative to the constraint's origin. You can optionally specify limits for the relative twist and swing rotation.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "bEnableSwingLimit",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flSwingLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bEnableTwistLimit",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flMinTwistAngle",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMaxTwistAngle",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flFriction",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Hinge Constraint",
        "libname": "CPulseServerFuncs::CreatePhysicsHingeConstraint",
        "description": "Create a physically simulated hinge between two entities.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "vHingeAxis",
                "type": "PVAL_VEC3"
            },
            {
                "name": "flHingeFriction",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMinRotationLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMaxRotationLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flInitialRotation",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Play Sequence",
        "libname": "CPulseAnimFuncs::PlaySequence",
        "description": "Play the specified animation sequence on a NON-ANIMGRAPH entity",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pSequenceName",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Sound Event Stop",
        "libname": "CPulseServerFuncs_Sounds::SoundEventStop",
        "description": "Stop a sound event.",
        "inparams": [
            {
                "name": "nSoundEventGuid",
                "type": "PVAL_SNDEVT_GUID"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Sound Event Set Param Float",
        "libname": "CPulseServerFuncs_Sounds::SoundEventSetParamFloat",
        "description": "Set a sound event parameter to a float value.",
        "inparams": [
            {
                "name": "nSoundEventGuid",
                "type": "PVAL_SNDEVT_GUID"
            },
            {
                "name": "pParameterName",
                "type": "PVAL_STRING"
            },
            {
                "name": "flValue",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Sin",
        "libname": "CPulseMathlib::Sin",
        "description": "Sine of angle, in degrees (0 -> 0, 90 -> 1)",
        "inparams": [
            {
                "name": "flDegrees",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Cos",
        "libname": "CPulseMathlib::Cos",
        "description": "Cosine of angle, in degrees (0 -> 1, 90 -> 0)",
        "inparams": [
            {
                "name": "flDegrees",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Pow",
        "libname": "CPulseMathlib::Pow",
        "description": "X to the Y power",
        "inparams": [
            {
                "name": "flValue",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flExponent",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Min Float",
        "libname": "CPulseMathlib::MinFloat",
        "description": "Minimum of two values (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "y",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Min Int",
        "libname": "CPulseMathlib::MinInt",
        "description": "Minimum of two values (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "y",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Max Float",
        "libname": "CPulseMathlib::MaxFloat",
        "description": "Maximum of two values (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "y",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Max Int",
        "libname": "CPulseMathlib::MaxInt",
        "description": "Maximum of two values (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "y",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Clamp Float",
        "libname": "CPulseMathlib::ClampFloat",
        "description": "Clamp value to range (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMin",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMax",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Clamp Int",
        "libname": "CPulseMathlib::ClampInt",
        "description": "Clamp value to range (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "nMin",
                "type": "PVAL_INT"
            },
            {
                "name": "nMax",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Abs Float",
        "libname": "CPulseMathlib::AbsFloat",
        "description": "Absolute value (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Abs Int",
        "libname": "CPulseMathlib::AbsInt",
        "description": "Absolute value (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Rounds Played This Phase",
        "libname": "CCSPointPulseAPI::GetRoundsPlayedThisPhase",
        "description": "Get the round number of the current half. Starts at 0.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get CT Score",
        "libname": "CCSPointPulseAPI::GetCTScore",
        "description": "Get the number of rounds won by CTs.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get T Score",
        "libname": "CCSPointPulseAPI::GetTScore",
        "description": "Get the number of rounds won by Ts.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Score To End Match",
        "libname": "CCSPointPulseAPI::GetScoreToEndMatch",
        "description": "Get the number of round wins needed to win the match. This number goes up each time a match enters overtime.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Abs Origin",
        "libname": "CBaseEntityAPI::GetAbsOrigin",
        "description": "The entity origin (absolute).",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Attachment Origin",
        "libname": "CBaseEntityAPI::GetAttachmentOrigin",
        "description": "Return the absolute position of the entity's attachment.",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachment",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3_WORLDSPACE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Origin",
        "libname": "CBaseEntityAPI::GetOrigin",
        "description": "The entity origin (local)",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3_WORLDSPACE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Team Number",
        "libname": "CBaseEntityAPI::GetTeamNumber",
        "description": "The entity team number",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Change Team",
        "libname": "CBaseEntityAPI::ChangeTeam",
        "description": "Set the entity team number",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "iTeamNum",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Class Name",
        "libname": "CBaseEntityAPI::GetClassName",
        "description": "The entity class name",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Find Model Config Entity",
        "libname": "CBaseEntityAPI::FindModelConfigEntity",
        "description": "Returns the model config entity attached to this entity by the specified name",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pConfigEntityName",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Point Template: Force Spawn",
        "libname": "CPointTemplateAPI::ForceSpawn",
        "description": "Tells the point_template entity to ForceSpawn and return the first entity that matches the name (wildcard)",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE:point_template"
            },
            {
                "name": "pLocationEntity",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Player Slot",
        "libname": "CBasePlayerControllerAPI::GetPlayerSlot",
        "description": "",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE:player_controller"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },

    {
        "type": "value",
        "displayname": "Is Fake Client",
        "libname": "CBasePlayerControllerAPI::IsFakeClient",
        "description": "Fake client, simulated server side; don't send network messages to them",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE:player_controller"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Set Next Think",
        "libname": "CPulseGraphInstance_ServerEntity::SetNextThink",
        "description": "Schedule the next think for the entity that this graph is running on. ( EXPERIMENTAL - may be removed in the future:: )",
        "inparams": [
            {
                "name": "flTime",
                "type": "PVAL_FLOAT"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Tag Cursor",
        "libname": "CPulseCursorFuncs::TagCursor",
        "description": "Save a named value of any type on the cursor.",
        "inparams": [
            {
                "name": "pTagName",
                "type": "PVAL_STRING"
            },
            {
                "name": "tagValue",
                "type": "PVAL_ANY"
            },
            {
                "name": "bInherit",
                "type": "PVAL_BOOL"
            }
        ]
    },

    {
        "type": "value",
        "displayname": "Cursor Has Tag",
        "libname": "CPulseCursorFuncs::CursorHasTag",
        "description": "Check if the cursor already has the given tag.",
        "inparams": [
            {
                "name": "pTagName",
                "type": "PVAL_STRING"
            },
            {
                "name": "tagValue",
                "type": "PVAL_ANY"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },

    {
        "type": "value",
        "displayname": "Any Other Cursors Have Tag",
        "libname": "CPulseCursorFuncs::AnyOtherCursorsHaveTag",
        "description": "Check if any yielded cursors on the graph already have the given tag.",
        "inparams": [
            {
                "name": "pTagName",
                "type": "PVAL_STRING"
            },
            {
                "name": "tagValue",
                "type": "PVAL_ANY"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Kill Cursors With Tag",
        "libname": "CPulseCursorFuncs::KillCursorsWithTag",
        "description": "Find all the yielded cursors on this graph with the matching tag and cancel them.",
        "inparams": [
            {
                "name": "pTagName",
                "type": "PVAL_STRING"
            },
            {
                "name": "tagValue",
                "type": "PVAL_ANY"
            },
            {
                "name": "nKillPriority",
                "type": "PVAL_SCHEMA_ENUM:PulseCursorCancelPriority_t"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Kill All Other Cursors",
        "libname": "CPulseCursorFuncs::KillAllOtherCursors",
        "description": "Find all the yielded cursors on this graph and cancel them.",
        "inparams": [
            {
                "name": "nKillPriority",
                "type": "PVAL_SCHEMA_ENUM:PulseCursorCancelPriority_t"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Remove Tag From Cursor",
        "libname": "CPulseCursorFuncs::RemoveTagFromCursor",
        "description": "Remove the given tag from this cursor. If other cursors are waiting on us, they will resume.",
        "inparams": [
            {
                "name": "pTagName",
                "type": "PVAL_STRING"
            },
            {
                "name": "tagValue",
                "type": "PVAL_ANY"
            }
        ]
    },

    {
        "type": "action",
        "displayname": "Kill This Cursor And Cancel",
        "libname": "CPulseCursorFuncs::KillThisCursorAndCancel",
        "description": "Optional. After taking an OnCanceled outflow, signal to any observers that this cursor is now canceled. Equivalent to not handling the original cancel outflow. If you don't use this, handling OnCanceled will be treated as success."
    },

    {
        "type": "action",
        "displayname": "Kill This Cursor And Fail",
        "libname": "CPulseCursorFuncs::KillThisCursorAndFail",
        "description": "Optional. After taking an OnFailed outflow, signal to any observers that this cursor is now failed. Equivalent to not handling the original fail outflow. If you don't use this, handling OnFailed will be treated as success."
    },

    {
        "type": "value",
        "displayname": "Get Trace Hit",
        "libname": "CPulseServerFuncs::GetTraceHit",
        "description": "Get trace results from a position in direction at given length.",
        "inparams": [
            {
                "name": "vStartPos",
                "type": "PVAL_VEC3_WORLDSPACE"
            },
            {
                "name": "vDirection",
                "type": "PVAL_VEC3"
            },
            {
                "name": "fMaxLength",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "hIgnoreEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "nTraceContents",
                "type": "PVAL_SCHEMA_ENUM:PulseTraceContents_t"
            },
            {
                "name": "nGroup",
                "type": "PVAL_SCHEMA_ENUM:PulseCollisionGroup_t"
            }
        ],
        "outparams": [
            {
                "name": "DidHit",
                "type": "PVAL_BOOL"
            },
            {
                "name": "HitDistance",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "HitLocation",
                "type": "PVAL_VEC3_WORLDSPACE"
            },
            {
                "name": "HitNormal",
                "type": "PVAL_VEC3"
            },
            {
                "name": "HitFraction",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "HitEntity",
                "type": "PVAL_EHANDLE"
            }
        ]
    }

    ]
}

