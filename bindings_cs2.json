{
    "events": [

    {
        "displayname": "Event_OnRoundStart",
        "libname": "CCSPointPulseAPI!Event_OnRoundStart",
        "inparams": [
            {
                "name": "nRoundNumber",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "displayname": "Event_OnRoundFreezeEnd",
        "libname": "CCSPointPulseAPI!Event_OnRoundFreezeEnd"
    },
    {
        "displayname": "Event_OnRoundEnd",
        "libname": "CCSPointPulseAPI!Event_OnRoundEnd",
        "inparams": [
            {
                "name": "nWinner",
                "type": "PVAL_INT"
            },
            {
                "name": "nReason",
                "type": "PVAL_INT"
            }
        ]
    }

    ],

    "gamefunctions": [

    {
        "type": "action",
        "displayname": "Con Command",
        "libname": "CPulseServerFuncs!ConCommand",
        "inparams": [
            {
                "name": "pCommand",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Graph Entity",
        "libname": "CPulseServerFuncs!GetGraphEntity",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Origin",
        "libname": "CPulseServerFuncs!GetEntityOrigin",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Height Above Nav Mesh",
        "libname": "CPulseServerFuncs!GetEntityHeightAboveNavMesh",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Height Above World Collision",
        "libname": "CPulseServerFuncs!GetEntityHeightAboveWorldCollision",
        "inparams": [
            {
                "name": "hEnt",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Entity Facing Yaw Angle Delta",
        "libname": "CPulseServerFuncs!GetEntityFacingYawAngleDelta",
        "inparams": [
            {
                "name": "hEnt1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEnt2",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Distance Between Points",
        "libname": "CPulseServerFuncs!GetDistanceBetweenPoints",
        "inparams": [
            {
                "name": "vPoint1",
                "type": "PVAL_VEC3"
            },
            {
                "name": "vPoint2",
                "type": "PVAL_VEC3"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Count Entities With Name",
        "libname": "CPulseServerFuncs!CountEntitiesWithName",
        "inparams": [
            {
                "name": "pNamePattern",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Teleport Entity",
        "libname": "CPulseServerFuncs!TeleportEntity",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Remove Entity",
        "libname": "CPulseServerFuncs!RemoveEntity",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Can Character See Entity",
        "libname": "CPulseServerFuncs!CanCharacterSeeEntity",
        "inparams": [
            {
                "name": "hEntityCharacter",
                "type": "PVAL_EHANDLE",
                "value": "baseplayerpawn"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Does Entity Have LOS",
        "libname": "CPulseServerFuncs!DoesEntityHaveLOS",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hEntityTarget",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_BOOL"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Deal Damage",
        "libname": "CPulseServerFuncs!DealDamage",
        "inparams": [
            {
                "name": "hTarget",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "hAttacker",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "flDamage",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "vecForce",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Remove All Ammo",
        "libname": "CPulseServerFuncs!RemoveAllAmmo",
        "inparams": [
            {
                "name": "hTarget",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Proxy",
        "libname": "CPulseServerFuncs!CreatePhysicsProxy",
        "description": "Creates a physics proxy at the entity's attachment point.",
        "inparams": [
            {
                "name": "hEntity",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName",
                "type": "PVAL_STRING"
            },
            {
                "name": "pPhysicsModel",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Constraint",
        "libname": "CPulseServerFuncs!CreatePhysicsConstraint",
        "description": "Constrain an entity to the world or another entity at a fixed relative position.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "bEnableLinearConstraint",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flLinearFrequency",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flLinearDampingRatio",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bEnableAngularConstraint",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flAngularFrequency",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flAngularDampeningRatio",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Ball Socket Constraint",
        "libname": "CPulseServerFuncs!CreatePhysicsBallSocketConstraint",
        "description": "Create a constraint that keeps the position of two objects fixed, relative to the constraint's origin. You can optionally specify limits for the relative twist and swing rotation.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "bEnableSwingLimit",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flSwingLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bEnableTwistLimit",
                "type": "PVAL_BOOL"
            },
            {
                "name": "flMinTwistAngle",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMaxTwistAngle",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flFriction",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Create Physics Hinge Constraint",
        "libname": "CPulseServerFuncs!CreatePhysicsHingeConstraint",
        "description": "Create a physically simulated hinge between two entities.",
        "inparams": [
            {
                "name": "pTarget1",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName1",
                "type": "PVAL_STRING"
            },
            {
                "name": "pTarget2",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachmentName2",
                "type": "PVAL_STRING"
            },
            {
                "name": "vHingeAxis",
                "type": "PVAL_VEC3"
            },
            {
                "name": "flHingeFriction",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMinRotationLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMaxRotationLimit",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flInitialRotation",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "bSnapObjectPositions",
                "type": "PVAL_BOOL"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Play Sequence",
        "libname": "CPulseAnimFuncs!PlaySequence",
        "description": "Play the specified animation sequence on a NON-ANIMGRAPH entity",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pSequenceName",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Sound Event Stop",
        "libname": "CPulseServerFuncs_Sounds!SoundEventStop",
        "description": "Stop a sound event.",
        "inparams": [
            {
                "name": "nSoundEventGuid",
                "type": "PVAL_SNDEVT_GUID"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Sound Event Set Param Float",
        "libname": "CPulseServerFuncs_Sounds!SoundEventSetParamFloat",
        "description": "Set a sound event parameter to a float value.",
        "inparams": [
            {
                "name": "nSoundEventGuid",
                "type": "PVAL_SNDEVT_GUID"
            },
            {
                "name": "pParameterName",
                "type": "PVAL_STRING"
            },
            {
                "name": "flValue",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Sin",
        "libname": "CPulseMathlib!Sin",
        "description": "Sine of angle, in degrees (0 -> 0, 90 -> 1)",
        "inparams": [
            {
                "name": "flDegrees",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Cos",
        "libname": "CPulseMathlib!Cos",
        "description": "Cosine of angle, in degrees (0 -> 1, 90 -> 0)",
        "inparams": [
            {
                "name": "flDegrees",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Pow",
        "libname": "CPulseMathlib!Pow",
        "description": "X to the Y power",
        "inparams": [
            {
                "name": "flValue",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flExponent",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Min Float",
        "libname": "CPulseMathlib!MinFloat",
        "description": "Minimum of two values (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "y",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Min Int",
        "libname": "CPulseMathlib!MinInt",
        "description": "Minimum of two values (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "y",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Max Float",
        "libname": "CPulseMathlib!MaxFloat",
        "description": "Maximum of two values (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "y",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Max Int",
        "libname": "CPulseMathlib!MaxInt",
        "description": "Maximum of two values (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "y",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Clamp Float",
        "libname": "CPulseMathlib!ClampFloat",
        "description": "Clamp value to range (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMin",
                "type": "PVAL_FLOAT"
            },
            {
                "name": "flMax",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Clamp Int",
        "libname": "CPulseMathlib!ClampInt",
        "description": "Clamp value to range (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            },
            {
                "name": "nMin",
                "type": "PVAL_INT"
            },
            {
                "name": "nMax",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Abs Float",
        "libname": "CPulseMathlib!AbsFloat",
        "description": "Absolute value (float)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_FLOAT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_FLOAT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Abs Int",
        "libname": "CPulseMathlib!AbsInt",
        "description": "Absolute value (int)",
        "inparams": [
            {
                "name": "x",
                "type": "PVAL_INT"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Rounds Played This Phase",
        "libname": "CCSPointPulseAPI!GetRoundsPlayedThisPhase",
        "description": "Get the round number of the current half. Starts at 0.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get CT Score",
        "libname": "CCSPointPulseAPI!GetCTScore",
        "description": "Get the number of rounds won by CTs.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get T Score",
        "libname": "CCSPointPulseAPI!GetTScore",
        "description": "Get the number of rounds won by Ts.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Score To End Match",
        "libname": "CCSPointPulseAPI!GetScoreToEndMatch",
        "description": "Get the number of round wins needed to win the match. This number goes up each time a match enters overtime.",
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Abs Origin",
        "libname": "CBaseEntityAPI!GetAbsOrigin",
        "description": "The entity origin (absolute).",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Attachment Origin",
        "libname": "CBaseEntityAPI!GetAttachmentOrigin",
        "description": "Return the absolute position of the entity's attachment.",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pAttachment",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Origin",
        "libname": "CBaseEntityAPI!GetOrigin",
        "description": "The entity origin (local)",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_VEC3"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Team Number",
        "libname": "CBaseEntityAPI!GetTeamNumber",
        "description": "The entity team number",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "action",
        "displayname": "Change Team",
        "libname": "CBaseEntityAPI!ChangeTeam",
        "description": "Set the entity team number",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "iTeamNum",
                "type": "PVAL_INT"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Get Class Name",
        "libname": "CBaseEntityAPI!GetClassName",
        "description": "The entity class name",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_STRING"
            }
        ]
    },
    {
        "type": "value",
        "displayname": "Find Model Config Entity",
        "libname": "CBaseEntityAPI!FindModelConfigEntity",
        "description": "Returns the model config entity attached to this entity by the specified name",
        "inparams": [
            {
                "name": "_Target",
                "type": "PVAL_EHANDLE"
            },
            {
                "name": "pConfigEntityName",
                "type": "PVAL_STRING"
            }
        ],
        "outparams": [
            {
                "name": "retval",
                "type": "PVAL_EHANDLE"
            }
        ]
    }

    ]
}

